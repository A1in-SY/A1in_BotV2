// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/proxy.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Proxy_SendMsg_FullMethodName        = "/qqbot.api.Proxy/SendMsg"
	Proxy_SendPrivateMsg_FullMethodName = "/qqbot.api.Proxy/SendPrivateMsg"
	Proxy_SendGroupMsg_FullMethodName   = "/qqbot.api.Proxy/SendGroupMsg"
)

// ProxyClient is the client API for Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyClient interface {
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
	SendPrivateMsg(ctx context.Context, in *SendPrivateMsgReq, opts ...grpc.CallOption) (*SendPrivateMsgResp, error)
	SendGroupMsg(ctx context.Context, in *SendGroupMsgReq, opts ...grpc.CallOption) (*SendGroupMsgResp, error)
}

type proxyClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyClient(cc grpc.ClientConnInterface) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	out := new(SendMsgResp)
	err := c.cc.Invoke(ctx, Proxy_SendMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) SendPrivateMsg(ctx context.Context, in *SendPrivateMsgReq, opts ...grpc.CallOption) (*SendPrivateMsgResp, error) {
	out := new(SendPrivateMsgResp)
	err := c.cc.Invoke(ctx, Proxy_SendPrivateMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) SendGroupMsg(ctx context.Context, in *SendGroupMsgReq, opts ...grpc.CallOption) (*SendGroupMsgResp, error) {
	out := new(SendGroupMsgResp)
	err := c.cc.Invoke(ctx, Proxy_SendGroupMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServer is the server API for Proxy service.
// All implementations must embed UnimplementedProxyServer
// for forward compatibility
type ProxyServer interface {
	SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error)
	SendPrivateMsg(context.Context, *SendPrivateMsgReq) (*SendPrivateMsgResp, error)
	SendGroupMsg(context.Context, *SendGroupMsgReq) (*SendGroupMsgResp, error)
	mustEmbedUnimplementedProxyServer()
}

// UnimplementedProxyServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServer struct {
}

func (UnimplementedProxyServer) SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedProxyServer) SendPrivateMsg(context.Context, *SendPrivateMsgReq) (*SendPrivateMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPrivateMsg not implemented")
}
func (UnimplementedProxyServer) SendGroupMsg(context.Context, *SendGroupMsgReq) (*SendGroupMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMsg not implemented")
}
func (UnimplementedProxyServer) mustEmbedUnimplementedProxyServer() {}

// UnsafeProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServer will
// result in compilation errors.
type UnsafeProxyServer interface {
	mustEmbedUnimplementedProxyServer()
}

func RegisterProxyServer(s grpc.ServiceRegistrar, srv ProxyServer) {
	s.RegisterService(&Proxy_ServiceDesc, srv)
}

func _Proxy_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Proxy_SendMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_SendPrivateMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPrivateMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).SendPrivateMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Proxy_SendPrivateMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).SendPrivateMsg(ctx, req.(*SendPrivateMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_SendGroupMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).SendGroupMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Proxy_SendGroupMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).SendGroupMsg(ctx, req.(*SendGroupMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Proxy_ServiceDesc is the grpc.ServiceDesc for Proxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Proxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qqbot.api.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _Proxy_SendMsg_Handler,
		},
		{
			MethodName: "SendPrivateMsg",
			Handler:    _Proxy_SendPrivateMsg_Handler,
		},
		{
			MethodName: "SendGroupMsg",
			Handler:    _Proxy_SendGroupMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proxy.proto",
}
