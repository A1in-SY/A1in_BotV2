// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.3
// source: api/notify.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNotifyLink = "/qqbot.api.Notify/Link"

type NotifyHTTPServer interface {
	Link(context.Context, *LinkReq) (*LinkResp, error)
}

func RegisterNotifyHTTPServer(s *http.Server, srv NotifyHTTPServer) {
	r := s.Route("/")
	r.GET("/notify", _Notify_Link0_HTTP_Handler(srv))
}

func _Notify_Link0_HTTP_Handler(srv NotifyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LinkReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotifyLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Link(ctx, req.(*LinkReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LinkResp)
		return ctx.Result(200, reply)
	}
}

type NotifyHTTPClient interface {
	Link(ctx context.Context, req *LinkReq, opts ...http.CallOption) (rsp *LinkResp, err error)
}

type NotifyHTTPClientImpl struct {
	cc *http.Client
}

func NewNotifyHTTPClient(client *http.Client) NotifyHTTPClient {
	return &NotifyHTTPClientImpl{client}
}

func (c *NotifyHTTPClientImpl) Link(ctx context.Context, in *LinkReq, opts ...http.CallOption) (*LinkResp, error) {
	var out LinkResp
	pattern := "/notify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotifyLink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
